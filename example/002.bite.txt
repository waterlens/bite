#!/usr/bin/env bite
// This is a comment

mod playground {
  use std::io

  fn min['a](v1: 'a, b: 'a) {
    if (a > b) {
      return b;
    } else {
      return a;
    }
  }

  enum Color {
    Red
    Yellow
    Blue
  }

  record RGB {
    R: int
    G: int
    B: int
  }

  enum Optional['a] {
    Some('a)
    None
  }

  effect Ping['a] {
    ping[Hpo: Pong['a]](str) : unit ~ Hpo | 'a
  }

  effect Pong['a] {
    pong[Hpi: Ping['a]](str) : unit ~ Hpi | 'a
  }

  fn pinger['a, Hpi: Ping['a]]() : unit ~ Hpi | 'a {
    try {
      Hpi.ping[Hpo]("ping");
    }
    with Hpo {
      pong[Hpi](msg) {
        resume {
          pinger:['a, Hpi]();
        }
      }
    }
  }

  fn ponger['a, Hpo: Pong['a]]() : unit ~ Hpo | 'a {
    try {
      Hpo.pong[Hpi]("pong");
    }
    with Hpi {
      ping[Hpo](msg) {
        resume {
          ponger:['a, Hpi]();
        }
      }
    }
  }

  fn make_RGB(R: int, G: int, B: int) : RGB {
    return RGB { .R, .G, .B };
  }

  fn try_divide(a: int, b: int) : Optional[(int * int)] {
    if (b == 0) {
      return None;
    } else {
      return Some((a / b, a % b));
    }
  }

  fn array() {
    var arr = [1, 2, 3, 4, 5];
    arr[1] = 0;
  }
}